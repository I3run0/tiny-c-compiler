Grammar:

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> unterminated_token
Rule 3     program -> one_or_more_global_declaration
Rule 4     one_or_more_global_declaration -> global_declaration
Rule 5     one_or_more_global_declaration -> global_declaration one_or_more_global_declaration
Rule 6     global_declaration -> declaration
Rule 7     global_declaration -> function_definition
Rule 8     function_definition -> type_specifier declarator compound_statement
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> CHAR
Rule 11    type_specifier -> VOID
Rule 12    declarator -> declarator LPAREN optional_parameter_list RPAREN
Rule 13    declarator -> LPAREN declarator RPAREN
Rule 14    declarator -> declarator LBRACKET optional_constant_expression RBRACKET
Rule 15    declarator -> identifier
Rule 16    optional_constant_expression -> empty
Rule 17    optional_constant_expression -> constant_expression
Rule 18    optional_parameter_list -> empty
Rule 19    optional_parameter_list -> parameter_list
Rule 20    constant_expression -> binary_expression
Rule 21    binary_expression -> binary_expression OR binary_expression  [precedence=left, level=1]
Rule 22    binary_expression -> binary_expression AND binary_expression  [precedence=left, level=1]
Rule 23    binary_expression -> binary_expression NE binary_expression  [precedence=left, level=2]
Rule 24    binary_expression -> binary_expression EQ binary_expression  [precedence=left, level=3]
Rule 25    binary_expression -> binary_expression GE binary_expression  [precedence=left, level=4]
Rule 26    binary_expression -> binary_expression GT binary_expression  [precedence=left, level=4]
Rule 27    binary_expression -> binary_expression LE binary_expression  [precedence=left, level=4]
Rule 28    binary_expression -> binary_expression LT binary_expression  [precedence=left, level=4]
Rule 29    binary_expression -> binary_expression MINUS binary_expression  [precedence=left, level=5]
Rule 30    binary_expression -> binary_expression PLUS binary_expression  [precedence=left, level=5]
Rule 31    binary_expression -> binary_expression MOD binary_expression  [precedence=left, level=7]
Rule 32    binary_expression -> binary_expression DIVIDE binary_expression  [precedence=left, level=6]
Rule 33    binary_expression -> binary_expression TIMES binary_expression  [precedence=left, level=6]
Rule 34    binary_expression -> unary_expression
Rule 35    unary_expression -> unary_operator unary_expression
Rule 36    unary_expression -> postfix_expression
Rule 37    postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN
Rule 38    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 39    postfix_expression -> primary_expression
Rule 40    optional_argument_expression -> empty
Rule 41    optional_argument_expression -> argument_expression
Rule 42    primary_expression -> string
Rule 43    primary_expression -> constant
Rule 44    primary_expression -> identifier
Rule 45    primary_expression -> LPAREN expression RPAREN
Rule 46    constant -> CHAR_CONST
Rule 47    constant -> INT_CONST
Rule 48    identifier -> ID
Rule 49    string -> STRING_LITERAL
Rule 50    unterminated_token -> UNTERMINATED_STRING
Rule 51    unterminated_token -> UNTERMINATED_COMMENT
Rule 52    expression -> expression COMMA assignment_expression
Rule 53    expression -> assignment_expression
Rule 54    argument_expression -> argument_expression COMMA assignment_expression
Rule 55    argument_expression -> assignment_expression
Rule 56    assignment_expression -> unary_expression EQUALS assignment_expression
Rule 57    assignment_expression -> binary_expression
Rule 58    unary_operator -> NOT
Rule 59    unary_operator -> MINUS  [precedence=left, level=5]
Rule 60    unary_operator -> PLUS  [precedence=left, level=5]
Rule 61    parameter_list -> parameter_list COMMA parameter_declaration
Rule 62    parameter_list -> parameter_declaration
Rule 63    parameter_declaration -> type_specifier declarator
Rule 64    declaration -> type_specifier optional_init_declarator_list SEMI
Rule 65    optional_init_declarator_list -> empty
Rule 66    optional_init_declarator_list -> init_declarator_list
Rule 67    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 68    init_declarator_list -> init_declarator
Rule 69    init_declarator -> declarator EQUALS initializer
Rule 70    init_declarator -> declarator
Rule 71    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 72    initializer -> LBRACE optional_initializer_list RBRACE
Rule 73    initializer -> assignment_expression
Rule 74    optional_initializer_list -> empty
Rule 75    optional_initializer_list -> initializer_list
Rule 76    initializer_list -> initializer_list COMMA initializer
Rule 77    initializer_list -> initializer
Rule 78    compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
Rule 79    zero_or_more_declarations -> empty
Rule 80    zero_or_more_declarations -> declaration zero_or_more_declarations
Rule 81    zero_or_more_statements -> empty
Rule 82    zero_or_more_statements -> statement zero_or_more_statements
Rule 83    statement -> read_statement
Rule 84    statement -> print_statement
Rule 85    statement -> assert_statement
Rule 86    statement -> jump_statement
Rule 87    statement -> iteration_statement
Rule 88    statement -> selection_statement
Rule 89    statement -> compound_statement
Rule 90    statement -> expression_statement
Rule 91    expression_statement -> optional_expression SEMI
Rule 92    optional_expression -> empty
Rule 93    optional_expression -> expression
Rule 94    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 95    selection_statement -> IF LPAREN expression RPAREN statement
Rule 96    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 97    iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
Rule 98    iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
Rule 99    jump_statement -> RETURN optional_expression SEMI
Rule 100   jump_statement -> BREAK SEMI
Rule 101   assert_statement -> ASSERT expression SEMI
Rule 102   print_statement -> PRINT LPAREN optional_expression RPAREN SEMI
Rule 103   read_statement -> READ LPAREN argument_expression RPAREN SEMI

Terminals, with rules where they appear:

AND                  : 22
ASSERT               : 101
BREAK                : 100
CHAR                 : 10
CHAR_CONST           : 46
COMMA                : 52 54 61 67 71 76
DIVIDE               : 32
ELSE                 : 94
EQ                   : 24
EQUALS               : 56 69
FOR                  : 97 98
GE                   : 25
GT                   : 26
ID                   : 48
IF                   : 94 95
INT                  : 9
INT_CONST            : 47
LBRACE               : 71 72 78
LBRACKET             : 14 38
LE                   : 27
LPAREN               : 12 13 37 45 94 95 96 97 98 102 103
LT                   : 28
MINUS                : 29 59
MOD                  : 31
NE                   : 23
NOT                  : 58
OR                   : 21
PLUS                 : 30 60
PRINT                : 102
RBRACE               : 71 72 78
RBRACKET             : 14 38
READ                 : 103
RETURN               : 99
RPAREN               : 12 13 37 45 94 95 96 97 98 102 103
SEMI                 : 64 91 97 98 98 99 100 101 102 103
STRING_LITERAL       : 49
TIMES                : 33
UNTERMINATED_COMMENT : 51
UNTERMINATED_STRING  : 50
VOID                 : 11
WHILE                : 96
error                : 

Nonterminals, with rules where they appear:

argument_expression  : 41 54 103
assert_statement     : 85
assignment_expression : 52 53 54 55 56 73
binary_expression    : 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 57
compound_statement   : 8 89
constant             : 43
constant_expression  : 17
declaration          : 6 80 97
declarator           : 8 12 13 14 63 69 70
empty                : 16 18 40 65 74 79 81 92
expression           : 38 45 52 93 94 95 96 101
expression_statement : 90
function_definition  : 7
global_declaration   : 4 5
identifier           : 15 44
init_declarator      : 67 68
init_declarator_list : 66 67
initializer          : 69 76 77
initializer_list     : 71 75 76
iteration_statement  : 87
jump_statement       : 86
one_or_more_global_declaration : 3 5
optional_argument_expression : 37
optional_constant_expression : 14
optional_expression  : 91 97 97 98 98 98 99 102
optional_init_declarator_list : 64
optional_initializer_list : 72
optional_parameter_list : 12
parameter_declaration : 61 62
parameter_list       : 19 61
postfix_expression   : 36 37 38
primary_expression   : 39
print_statement      : 84
program              : 0
read_statement       : 83
selection_statement  : 88
statement            : 82 94 94 95 96 97 98
string               : 42
type_specifier       : 8 63 64
unary_expression     : 34 35 56
unary_operator       : 35
unterminated_token   : 2
zero_or_more_declarations : 78 80
zero_or_more_statements : 78 82


state 0

    (0) S' -> . program
    (2) program -> . unterminated_token
    (3) program -> . one_or_more_global_declaration
    (50) unterminated_token -> . UNTERMINATED_STRING
    (51) unterminated_token -> . UNTERMINATED_COMMENT
    (4) one_or_more_global_declaration -> . global_declaration
    (5) one_or_more_global_declaration -> . global_declaration one_or_more_global_declaration
    (6) global_declaration -> . declaration
    (7) global_declaration -> . function_definition
    (64) declaration -> . type_specifier optional_init_declarator_list SEMI
    (8) function_definition -> . type_specifier declarator compound_statement
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    UNTERMINATED_STRING shift and go to state 4
    UNTERMINATED_COMMENT shift and go to state 5
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    program                        shift and go to state 1
    unterminated_token             shift and go to state 2
    one_or_more_global_declaration shift and go to state 3
    global_declaration             shift and go to state 6
    declaration                    shift and go to state 7
    function_definition            shift and go to state 8
    type_specifier                 shift and go to state 9

state 1

    (0) S' -> program .


state 2

    (2) program -> unterminated_token .
    $end            reduce using rule 2 (program -> unterminated_token .)


state 3

    (3) program -> one_or_more_global_declaration .
    $end            reduce using rule 3 (program -> one_or_more_global_declaration .)


state 4

    (50) unterminated_token -> UNTERMINATED_STRING .
    $end            reduce using rule 50 (unterminated_token -> UNTERMINATED_STRING .)


state 5

    (51) unterminated_token -> UNTERMINATED_COMMENT .
    $end            reduce using rule 51 (unterminated_token -> UNTERMINATED_COMMENT .)


state 6

    (4) one_or_more_global_declaration -> global_declaration .
    (5) one_or_more_global_declaration -> global_declaration . one_or_more_global_declaration
    (4) one_or_more_global_declaration -> . global_declaration
    (5) one_or_more_global_declaration -> . global_declaration one_or_more_global_declaration
    (6) global_declaration -> . declaration
    (7) global_declaration -> . function_definition
    (64) declaration -> . type_specifier optional_init_declarator_list SEMI
    (8) function_definition -> . type_specifier declarator compound_statement
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    $end            reduce using rule 4 (one_or_more_global_declaration -> global_declaration .)
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    global_declaration             shift and go to state 6
    one_or_more_global_declaration shift and go to state 13
    declaration                    shift and go to state 7
    function_definition            shift and go to state 8
    type_specifier                 shift and go to state 9

state 7

    (6) global_declaration -> declaration .
    INT             reduce using rule 6 (global_declaration -> declaration .)
    CHAR            reduce using rule 6 (global_declaration -> declaration .)
    VOID            reduce using rule 6 (global_declaration -> declaration .)
    $end            reduce using rule 6 (global_declaration -> declaration .)


state 8

    (7) global_declaration -> function_definition .
    INT             reduce using rule 7 (global_declaration -> function_definition .)
    CHAR            reduce using rule 7 (global_declaration -> function_definition .)
    VOID            reduce using rule 7 (global_declaration -> function_definition .)
    $end            reduce using rule 7 (global_declaration -> function_definition .)


state 9

    (64) declaration -> type_specifier . optional_init_declarator_list SEMI
    (8) function_definition -> type_specifier . declarator compound_statement
    (65) optional_init_declarator_list -> . empty
    (66) optional_init_declarator_list -> . init_declarator_list
    (12) declarator -> . declarator LPAREN optional_parameter_list RPAREN
    (13) declarator -> . LPAREN declarator RPAREN
    (14) declarator -> . declarator LBRACKET optional_constant_expression RBRACKET
    (15) declarator -> . identifier
    (1) empty -> .
    (67) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (68) init_declarator_list -> . init_declarator
    (48) identifier -> . ID
    (69) init_declarator -> . declarator EQUALS initializer
    (70) init_declarator -> . declarator
    LPAREN          shift and go to state 18
    SEMI            reduce using rule 1 (empty -> .)
    ID              shift and go to state 21

    optional_init_declarator_list  shift and go to state 14
    declarator                     shift and go to state 15
    empty                          shift and go to state 16
    init_declarator_list           shift and go to state 17
    identifier                     shift and go to state 19
    init_declarator                shift and go to state 20

state 10

    (9) type_specifier -> INT .
    LPAREN          reduce using rule 9 (type_specifier -> INT .)
    ID              reduce using rule 9 (type_specifier -> INT .)
    SEMI            reduce using rule 9 (type_specifier -> INT .)


state 11

    (10) type_specifier -> CHAR .
    LPAREN          reduce using rule 10 (type_specifier -> CHAR .)
    ID              reduce using rule 10 (type_specifier -> CHAR .)
    SEMI            reduce using rule 10 (type_specifier -> CHAR .)


state 12

    (11) type_specifier -> VOID .
    LPAREN          reduce using rule 11 (type_specifier -> VOID .)
    ID              reduce using rule 11 (type_specifier -> VOID .)
    SEMI            reduce using rule 11 (type_specifier -> VOID .)


state 13

    (5) one_or_more_global_declaration -> global_declaration one_or_more_global_declaration .
    $end            reduce using rule 5 (one_or_more_global_declaration -> global_declaration one_or_more_global_declaration .)


state 14

    (64) declaration -> type_specifier optional_init_declarator_list . SEMI
    SEMI            shift and go to state 22


state 15

    (8) function_definition -> type_specifier declarator . compound_statement
    (12) declarator -> declarator . LPAREN optional_parameter_list RPAREN
    (14) declarator -> declarator . LBRACKET optional_constant_expression RBRACKET
    (69) init_declarator -> declarator . EQUALS initializer
    (70) init_declarator -> declarator .
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    LPAREN          shift and go to state 24
    LBRACKET        shift and go to state 25
    EQUALS          shift and go to state 26
    COMMA           reduce using rule 70 (init_declarator -> declarator .)
    SEMI            reduce using rule 70 (init_declarator -> declarator .)
    LBRACE          shift and go to state 27

    compound_statement             shift and go to state 23

state 16

    (65) optional_init_declarator_list -> empty .
    SEMI            reduce using rule 65 (optional_init_declarator_list -> empty .)


state 17

    (66) optional_init_declarator_list -> init_declarator_list .
    (67) init_declarator_list -> init_declarator_list . COMMA init_declarator
    SEMI            reduce using rule 66 (optional_init_declarator_list -> init_declarator_list .)
    COMMA           shift and go to state 28


state 18

    (13) declarator -> LPAREN . declarator RPAREN
    (12) declarator -> . declarator LPAREN optional_parameter_list RPAREN
    (13) declarator -> . LPAREN declarator RPAREN
    (14) declarator -> . declarator LBRACKET optional_constant_expression RBRACKET
    (15) declarator -> . identifier
    (48) identifier -> . ID
    LPAREN          shift and go to state 18
    ID              shift and go to state 21

    declarator                     shift and go to state 29
    identifier                     shift and go to state 19

state 19

    (15) declarator -> identifier .
    LPAREN          reduce using rule 15 (declarator -> identifier .)
    LBRACKET        reduce using rule 15 (declarator -> identifier .)
    EQUALS          reduce using rule 15 (declarator -> identifier .)
    LBRACE          reduce using rule 15 (declarator -> identifier .)
    COMMA           reduce using rule 15 (declarator -> identifier .)
    SEMI            reduce using rule 15 (declarator -> identifier .)
    RPAREN          reduce using rule 15 (declarator -> identifier .)


state 20

    (68) init_declarator_list -> init_declarator .
    COMMA           reduce using rule 68 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 68 (init_declarator_list -> init_declarator .)


state 21

    (48) identifier -> ID .
    LPAREN          reduce using rule 48 (identifier -> ID .)
    LBRACKET        reduce using rule 48 (identifier -> ID .)
    EQUALS          reduce using rule 48 (identifier -> ID .)
    LBRACE          reduce using rule 48 (identifier -> ID .)
    COMMA           reduce using rule 48 (identifier -> ID .)
    SEMI            reduce using rule 48 (identifier -> ID .)
    RPAREN          reduce using rule 48 (identifier -> ID .)
    OR              reduce using rule 48 (identifier -> ID .)
    AND             reduce using rule 48 (identifier -> ID .)
    NE              reduce using rule 48 (identifier -> ID .)
    EQ              reduce using rule 48 (identifier -> ID .)
    GE              reduce using rule 48 (identifier -> ID .)
    GT              reduce using rule 48 (identifier -> ID .)
    LE              reduce using rule 48 (identifier -> ID .)
    LT              reduce using rule 48 (identifier -> ID .)
    MINUS           reduce using rule 48 (identifier -> ID .)
    PLUS            reduce using rule 48 (identifier -> ID .)
    MOD             reduce using rule 48 (identifier -> ID .)
    DIVIDE          reduce using rule 48 (identifier -> ID .)
    TIMES           reduce using rule 48 (identifier -> ID .)
    RBRACKET        reduce using rule 48 (identifier -> ID .)
    RBRACE          reduce using rule 48 (identifier -> ID .)


state 22

    (64) declaration -> type_specifier optional_init_declarator_list SEMI .
    INT             reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    CHAR            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    VOID            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    $end            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    READ            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    PRINT           reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    ASSERT          reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    RETURN          reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    BREAK           reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    WHILE           reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    FOR             reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    IF              reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    LBRACE          reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    NOT             reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    MINUS           reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    PLUS            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    LPAREN          reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    INT_CONST       reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    ID              reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    RBRACE          reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)
    SEMI            reduce using rule 64 (declaration -> type_specifier optional_init_declarator_list SEMI .)


state 23

    (8) function_definition -> type_specifier declarator compound_statement .
    INT             reduce using rule 8 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 8 (function_definition -> type_specifier declarator compound_statement .)
    VOID            reduce using rule 8 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 8 (function_definition -> type_specifier declarator compound_statement .)


state 24

    (12) declarator -> declarator LPAREN . optional_parameter_list RPAREN
    (18) optional_parameter_list -> . empty
    (19) optional_parameter_list -> . parameter_list
    (1) empty -> .
    (61) parameter_list -> . parameter_list COMMA parameter_declaration
    (62) parameter_list -> . parameter_declaration
    (63) parameter_declaration -> . type_specifier declarator
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    RPAREN          reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    optional_parameter_list        shift and go to state 30
    empty                          shift and go to state 31
    parameter_list                 shift and go to state 32
    parameter_declaration          shift and go to state 33
    type_specifier                 shift and go to state 34

state 25

    (14) declarator -> declarator LBRACKET . optional_constant_expression RBRACKET
    (16) optional_constant_expression -> . empty
    (17) optional_constant_expression -> . constant_expression
    (1) empty -> .
    (20) constant_expression -> . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RBRACKET        reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_constant_expression   shift and go to state 35
    empty                          shift and go to state 36
    constant_expression            shift and go to state 37
    binary_expression              shift and go to state 38
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 26

    (69) init_declarator -> declarator EQUALS . initializer
    (71) initializer -> . LBRACE initializer_list COMMA RBRACE
    (72) initializer -> . LBRACE optional_initializer_list RBRACE
    (73) initializer -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    LBRACE          shift and go to state 54
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    initializer                    shift and go to state 53
    assignment_expression          shift and go to state 55
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 27

    (78) compound_statement -> LBRACE . zero_or_more_declarations zero_or_more_statements RBRACE
    (79) zero_or_more_declarations -> . empty
    (80) zero_or_more_declarations -> . declaration zero_or_more_declarations
    (1) empty -> .
    (64) declaration -> . type_specifier optional_init_declarator_list SEMI
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    READ            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    ASSERT          reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    BREAK           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    LBRACE          reduce using rule 1 (empty -> .)
    NOT             reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    STRING_LITERAL  reduce using rule 1 (empty -> .)
    CHAR_CONST      reduce using rule 1 (empty -> .)
    INT_CONST       reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    zero_or_more_declarations      shift and go to state 58
    empty                          shift and go to state 59
    declaration                    shift and go to state 60
    type_specifier                 shift and go to state 61

state 28

    (67) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (69) init_declarator -> . declarator EQUALS initializer
    (70) init_declarator -> . declarator
    (12) declarator -> . declarator LPAREN optional_parameter_list RPAREN
    (13) declarator -> . LPAREN declarator RPAREN
    (14) declarator -> . declarator LBRACKET optional_constant_expression RBRACKET
    (15) declarator -> . identifier
    (48) identifier -> . ID
    LPAREN          shift and go to state 18
    ID              shift and go to state 21

    init_declarator                shift and go to state 62
    declarator                     shift and go to state 63
    identifier                     shift and go to state 19

state 29

    (13) declarator -> LPAREN declarator . RPAREN
    (12) declarator -> declarator . LPAREN optional_parameter_list RPAREN
    (14) declarator -> declarator . LBRACKET optional_constant_expression RBRACKET
    RPAREN          shift and go to state 64
    LPAREN          shift and go to state 24
    LBRACKET        shift and go to state 25


state 30

    (12) declarator -> declarator LPAREN optional_parameter_list . RPAREN
    RPAREN          shift and go to state 65


state 31

    (18) optional_parameter_list -> empty .
    RPAREN          reduce using rule 18 (optional_parameter_list -> empty .)


state 32

    (19) optional_parameter_list -> parameter_list .
    (61) parameter_list -> parameter_list . COMMA parameter_declaration
    RPAREN          reduce using rule 19 (optional_parameter_list -> parameter_list .)
    COMMA           shift and go to state 66


state 33

    (62) parameter_list -> parameter_declaration .
    COMMA           reduce using rule 62 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 62 (parameter_list -> parameter_declaration .)


state 34

    (63) parameter_declaration -> type_specifier . declarator
    (12) declarator -> . declarator LPAREN optional_parameter_list RPAREN
    (13) declarator -> . LPAREN declarator RPAREN
    (14) declarator -> . declarator LBRACKET optional_constant_expression RBRACKET
    (15) declarator -> . identifier
    (48) identifier -> . ID
    LPAREN          shift and go to state 18
    ID              shift and go to state 21

    declarator                     shift and go to state 67
    identifier                     shift and go to state 19

state 35

    (14) declarator -> declarator LBRACKET optional_constant_expression . RBRACKET
    RBRACKET        shift and go to state 68


state 36

    (16) optional_constant_expression -> empty .
    RBRACKET        reduce using rule 16 (optional_constant_expression -> empty .)


state 37

    (17) optional_constant_expression -> constant_expression .
    RBRACKET        reduce using rule 17 (optional_constant_expression -> constant_expression .)


state 38

    (20) constant_expression -> binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    RBRACKET        reduce using rule 20 (constant_expression -> binary_expression .)
    OR              shift and go to state 69
    AND             shift and go to state 70
    NE              shift and go to state 71
    EQ              shift and go to state 72
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 39

    (59) unary_operator -> MINUS .
    NOT             reduce using rule 59 (unary_operator -> MINUS .)
    MINUS           reduce using rule 59 (unary_operator -> MINUS .)
    PLUS            reduce using rule 59 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 59 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 59 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 59 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 59 (unary_operator -> MINUS .)
    ID              reduce using rule 59 (unary_operator -> MINUS .)


state 40

    (60) unary_operator -> PLUS .
    NOT             reduce using rule 60 (unary_operator -> PLUS .)
    MINUS           reduce using rule 60 (unary_operator -> PLUS .)
    PLUS            reduce using rule 60 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 60 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 60 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 60 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 60 (unary_operator -> PLUS .)
    ID              reduce using rule 60 (unary_operator -> PLUS .)


state 41

    (34) binary_expression -> unary_expression .
    OR              reduce using rule 34 (binary_expression -> unary_expression .)
    AND             reduce using rule 34 (binary_expression -> unary_expression .)
    NE              reduce using rule 34 (binary_expression -> unary_expression .)
    EQ              reduce using rule 34 (binary_expression -> unary_expression .)
    GE              reduce using rule 34 (binary_expression -> unary_expression .)
    GT              reduce using rule 34 (binary_expression -> unary_expression .)
    LE              reduce using rule 34 (binary_expression -> unary_expression .)
    LT              reduce using rule 34 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> unary_expression .)
    PLUS            reduce using rule 34 (binary_expression -> unary_expression .)
    MOD             reduce using rule 34 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 34 (binary_expression -> unary_expression .)
    TIMES           reduce using rule 34 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> unary_expression .)
    SEMI            reduce using rule 34 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> unary_expression .)


state 42

    (35) unary_expression -> unary_operator . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    unary_operator                 shift and go to state 42
    unary_expression               shift and go to state 82
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 43

    (36) unary_expression -> postfix_expression .
    (37) postfix_expression -> postfix_expression . LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    OR              reduce using rule 36 (unary_expression -> postfix_expression .)
    AND             reduce using rule 36 (unary_expression -> postfix_expression .)
    NE              reduce using rule 36 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 36 (unary_expression -> postfix_expression .)
    GE              reduce using rule 36 (unary_expression -> postfix_expression .)
    GT              reduce using rule 36 (unary_expression -> postfix_expression .)
    LE              reduce using rule 36 (unary_expression -> postfix_expression .)
    LT              reduce using rule 36 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 36 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 36 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 36 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 36 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 36 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 36 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 36 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 36 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 36 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 36 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 36 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 83
    LBRACKET        shift and go to state 84


state 44

    (58) unary_operator -> NOT .
    NOT             reduce using rule 58 (unary_operator -> NOT .)
    MINUS           reduce using rule 58 (unary_operator -> NOT .)
    PLUS            reduce using rule 58 (unary_operator -> NOT .)
    LPAREN          reduce using rule 58 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 58 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 58 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 58 (unary_operator -> NOT .)
    ID              reduce using rule 58 (unary_operator -> NOT .)


state 45

    (45) primary_expression -> LPAREN . expression RPAREN
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 85
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 46

    (39) postfix_expression -> primary_expression .
    LPAREN          reduce using rule 39 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 39 (postfix_expression -> primary_expression .)
    OR              reduce using rule 39 (postfix_expression -> primary_expression .)
    AND             reduce using rule 39 (postfix_expression -> primary_expression .)
    NE              reduce using rule 39 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 39 (postfix_expression -> primary_expression .)
    GE              reduce using rule 39 (postfix_expression -> primary_expression .)
    GT              reduce using rule 39 (postfix_expression -> primary_expression .)
    LE              reduce using rule 39 (postfix_expression -> primary_expression .)
    LT              reduce using rule 39 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 39 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 39 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 39 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 39 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 39 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 39 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 39 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 39 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 39 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 39 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 39 (postfix_expression -> primary_expression .)


state 47

    (42) primary_expression -> string .
    LPAREN          reduce using rule 42 (primary_expression -> string .)
    LBRACKET        reduce using rule 42 (primary_expression -> string .)
    OR              reduce using rule 42 (primary_expression -> string .)
    AND             reduce using rule 42 (primary_expression -> string .)
    NE              reduce using rule 42 (primary_expression -> string .)
    EQ              reduce using rule 42 (primary_expression -> string .)
    GE              reduce using rule 42 (primary_expression -> string .)
    GT              reduce using rule 42 (primary_expression -> string .)
    LE              reduce using rule 42 (primary_expression -> string .)
    LT              reduce using rule 42 (primary_expression -> string .)
    MINUS           reduce using rule 42 (primary_expression -> string .)
    PLUS            reduce using rule 42 (primary_expression -> string .)
    MOD             reduce using rule 42 (primary_expression -> string .)
    DIVIDE          reduce using rule 42 (primary_expression -> string .)
    TIMES           reduce using rule 42 (primary_expression -> string .)
    RBRACKET        reduce using rule 42 (primary_expression -> string .)
    EQUALS          reduce using rule 42 (primary_expression -> string .)
    COMMA           reduce using rule 42 (primary_expression -> string .)
    SEMI            reduce using rule 42 (primary_expression -> string .)
    RPAREN          reduce using rule 42 (primary_expression -> string .)
    RBRACE          reduce using rule 42 (primary_expression -> string .)


state 48

    (43) primary_expression -> constant .
    LPAREN          reduce using rule 43 (primary_expression -> constant .)
    LBRACKET        reduce using rule 43 (primary_expression -> constant .)
    OR              reduce using rule 43 (primary_expression -> constant .)
    AND             reduce using rule 43 (primary_expression -> constant .)
    NE              reduce using rule 43 (primary_expression -> constant .)
    EQ              reduce using rule 43 (primary_expression -> constant .)
    GE              reduce using rule 43 (primary_expression -> constant .)
    GT              reduce using rule 43 (primary_expression -> constant .)
    LE              reduce using rule 43 (primary_expression -> constant .)
    LT              reduce using rule 43 (primary_expression -> constant .)
    MINUS           reduce using rule 43 (primary_expression -> constant .)
    PLUS            reduce using rule 43 (primary_expression -> constant .)
    MOD             reduce using rule 43 (primary_expression -> constant .)
    DIVIDE          reduce using rule 43 (primary_expression -> constant .)
    TIMES           reduce using rule 43 (primary_expression -> constant .)
    RBRACKET        reduce using rule 43 (primary_expression -> constant .)
    EQUALS          reduce using rule 43 (primary_expression -> constant .)
    COMMA           reduce using rule 43 (primary_expression -> constant .)
    SEMI            reduce using rule 43 (primary_expression -> constant .)
    RPAREN          reduce using rule 43 (primary_expression -> constant .)
    RBRACE          reduce using rule 43 (primary_expression -> constant .)


state 49

    (44) primary_expression -> identifier .
    LPAREN          reduce using rule 44 (primary_expression -> identifier .)
    LBRACKET        reduce using rule 44 (primary_expression -> identifier .)
    OR              reduce using rule 44 (primary_expression -> identifier .)
    AND             reduce using rule 44 (primary_expression -> identifier .)
    NE              reduce using rule 44 (primary_expression -> identifier .)
    EQ              reduce using rule 44 (primary_expression -> identifier .)
    GE              reduce using rule 44 (primary_expression -> identifier .)
    GT              reduce using rule 44 (primary_expression -> identifier .)
    LE              reduce using rule 44 (primary_expression -> identifier .)
    LT              reduce using rule 44 (primary_expression -> identifier .)
    MINUS           reduce using rule 44 (primary_expression -> identifier .)
    PLUS            reduce using rule 44 (primary_expression -> identifier .)
    MOD             reduce using rule 44 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 44 (primary_expression -> identifier .)
    TIMES           reduce using rule 44 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 44 (primary_expression -> identifier .)
    EQUALS          reduce using rule 44 (primary_expression -> identifier .)
    COMMA           reduce using rule 44 (primary_expression -> identifier .)
    SEMI            reduce using rule 44 (primary_expression -> identifier .)
    RPAREN          reduce using rule 44 (primary_expression -> identifier .)
    RBRACE          reduce using rule 44 (primary_expression -> identifier .)


state 50

    (49) string -> STRING_LITERAL .
    LPAREN          reduce using rule 49 (string -> STRING_LITERAL .)
    LBRACKET        reduce using rule 49 (string -> STRING_LITERAL .)
    OR              reduce using rule 49 (string -> STRING_LITERAL .)
    AND             reduce using rule 49 (string -> STRING_LITERAL .)
    NE              reduce using rule 49 (string -> STRING_LITERAL .)
    EQ              reduce using rule 49 (string -> STRING_LITERAL .)
    GE              reduce using rule 49 (string -> STRING_LITERAL .)
    GT              reduce using rule 49 (string -> STRING_LITERAL .)
    LE              reduce using rule 49 (string -> STRING_LITERAL .)
    LT              reduce using rule 49 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 49 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 49 (string -> STRING_LITERAL .)
    MOD             reduce using rule 49 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 49 (string -> STRING_LITERAL .)
    TIMES           reduce using rule 49 (string -> STRING_LITERAL .)
    RBRACKET        reduce using rule 49 (string -> STRING_LITERAL .)
    EQUALS          reduce using rule 49 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 49 (string -> STRING_LITERAL .)
    SEMI            reduce using rule 49 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 49 (string -> STRING_LITERAL .)
    RBRACE          reduce using rule 49 (string -> STRING_LITERAL .)


state 51

    (46) constant -> CHAR_CONST .
    LPAREN          reduce using rule 46 (constant -> CHAR_CONST .)
    LBRACKET        reduce using rule 46 (constant -> CHAR_CONST .)
    OR              reduce using rule 46 (constant -> CHAR_CONST .)
    AND             reduce using rule 46 (constant -> CHAR_CONST .)
    NE              reduce using rule 46 (constant -> CHAR_CONST .)
    EQ              reduce using rule 46 (constant -> CHAR_CONST .)
    GE              reduce using rule 46 (constant -> CHAR_CONST .)
    GT              reduce using rule 46 (constant -> CHAR_CONST .)
    LE              reduce using rule 46 (constant -> CHAR_CONST .)
    LT              reduce using rule 46 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 46 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 46 (constant -> CHAR_CONST .)
    MOD             reduce using rule 46 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 46 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 46 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 46 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 46 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 46 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 46 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 46 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 46 (constant -> CHAR_CONST .)


state 52

    (47) constant -> INT_CONST .
    LPAREN          reduce using rule 47 (constant -> INT_CONST .)
    LBRACKET        reduce using rule 47 (constant -> INT_CONST .)
    OR              reduce using rule 47 (constant -> INT_CONST .)
    AND             reduce using rule 47 (constant -> INT_CONST .)
    NE              reduce using rule 47 (constant -> INT_CONST .)
    EQ              reduce using rule 47 (constant -> INT_CONST .)
    GE              reduce using rule 47 (constant -> INT_CONST .)
    GT              reduce using rule 47 (constant -> INT_CONST .)
    LE              reduce using rule 47 (constant -> INT_CONST .)
    LT              reduce using rule 47 (constant -> INT_CONST .)
    MINUS           reduce using rule 47 (constant -> INT_CONST .)
    PLUS            reduce using rule 47 (constant -> INT_CONST .)
    MOD             reduce using rule 47 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 47 (constant -> INT_CONST .)
    TIMES           reduce using rule 47 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 47 (constant -> INT_CONST .)
    EQUALS          reduce using rule 47 (constant -> INT_CONST .)
    COMMA           reduce using rule 47 (constant -> INT_CONST .)
    SEMI            reduce using rule 47 (constant -> INT_CONST .)
    RPAREN          reduce using rule 47 (constant -> INT_CONST .)
    RBRACE          reduce using rule 47 (constant -> INT_CONST .)


state 53

    (69) init_declarator -> declarator EQUALS initializer .
    COMMA           reduce using rule 69 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 69 (init_declarator -> declarator EQUALS initializer .)


state 54

    (71) initializer -> LBRACE . initializer_list COMMA RBRACE
    (72) initializer -> LBRACE . optional_initializer_list RBRACE
    (76) initializer_list -> . initializer_list COMMA initializer
    (77) initializer_list -> . initializer
    (74) optional_initializer_list -> . empty
    (75) optional_initializer_list -> . initializer_list
    (71) initializer -> . LBRACE initializer_list COMMA RBRACE
    (72) initializer -> . LBRACE optional_initializer_list RBRACE
    (73) initializer -> . assignment_expression
    (1) empty -> .
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    LBRACE          shift and go to state 54
    RBRACE          reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    initializer_list               shift and go to state 87
    optional_initializer_list      shift and go to state 88
    initializer                    shift and go to state 89
    empty                          shift and go to state 90
    assignment_expression          shift and go to state 55
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 55

    (73) initializer -> assignment_expression .
    COMMA           reduce using rule 73 (initializer -> assignment_expression .)
    SEMI            reduce using rule 73 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 73 (initializer -> assignment_expression .)


state 56

    (56) assignment_expression -> unary_expression . EQUALS assignment_expression
    (34) binary_expression -> unary_expression .
    EQUALS          shift and go to state 91
    OR              reduce using rule 34 (binary_expression -> unary_expression .)
    AND             reduce using rule 34 (binary_expression -> unary_expression .)
    NE              reduce using rule 34 (binary_expression -> unary_expression .)
    EQ              reduce using rule 34 (binary_expression -> unary_expression .)
    GE              reduce using rule 34 (binary_expression -> unary_expression .)
    GT              reduce using rule 34 (binary_expression -> unary_expression .)
    LE              reduce using rule 34 (binary_expression -> unary_expression .)
    LT              reduce using rule 34 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> unary_expression .)
    PLUS            reduce using rule 34 (binary_expression -> unary_expression .)
    MOD             reduce using rule 34 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 34 (binary_expression -> unary_expression .)
    TIMES           reduce using rule 34 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> unary_expression .)
    SEMI            reduce using rule 34 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> unary_expression .)


state 57

    (57) assignment_expression -> binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    COMMA           reduce using rule 57 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 57 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 57 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 57 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 57 (assignment_expression -> binary_expression .)
    OR              shift and go to state 69
    AND             shift and go to state 70
    NE              shift and go to state 71
    EQ              shift and go to state 72
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 58

    (78) compound_statement -> LBRACE zero_or_more_declarations . zero_or_more_statements RBRACE
    (81) zero_or_more_statements -> . empty
    (82) zero_or_more_statements -> . statement zero_or_more_statements
    (1) empty -> .
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    zero_or_more_statements        shift and go to state 92
    empty                          shift and go to state 93
    statement                      shift and go to state 94
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    optional_expression            shift and go to state 105
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 59

    (79) zero_or_more_declarations -> empty .
    READ            reduce using rule 79 (zero_or_more_declarations -> empty .)
    PRINT           reduce using rule 79 (zero_or_more_declarations -> empty .)
    ASSERT          reduce using rule 79 (zero_or_more_declarations -> empty .)
    RETURN          reduce using rule 79 (zero_or_more_declarations -> empty .)
    BREAK           reduce using rule 79 (zero_or_more_declarations -> empty .)
    WHILE           reduce using rule 79 (zero_or_more_declarations -> empty .)
    FOR             reduce using rule 79 (zero_or_more_declarations -> empty .)
    IF              reduce using rule 79 (zero_or_more_declarations -> empty .)
    LBRACE          reduce using rule 79 (zero_or_more_declarations -> empty .)
    NOT             reduce using rule 79 (zero_or_more_declarations -> empty .)
    MINUS           reduce using rule 79 (zero_or_more_declarations -> empty .)
    PLUS            reduce using rule 79 (zero_or_more_declarations -> empty .)
    LPAREN          reduce using rule 79 (zero_or_more_declarations -> empty .)
    STRING_LITERAL  reduce using rule 79 (zero_or_more_declarations -> empty .)
    CHAR_CONST      reduce using rule 79 (zero_or_more_declarations -> empty .)
    INT_CONST       reduce using rule 79 (zero_or_more_declarations -> empty .)
    ID              reduce using rule 79 (zero_or_more_declarations -> empty .)
    RBRACE          reduce using rule 79 (zero_or_more_declarations -> empty .)
    SEMI            reduce using rule 79 (zero_or_more_declarations -> empty .)


state 60

    (80) zero_or_more_declarations -> declaration . zero_or_more_declarations
    (79) zero_or_more_declarations -> . empty
    (80) zero_or_more_declarations -> . declaration zero_or_more_declarations
    (1) empty -> .
    (64) declaration -> . type_specifier optional_init_declarator_list SEMI
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    READ            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    ASSERT          reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    BREAK           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    LBRACE          reduce using rule 1 (empty -> .)
    NOT             reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    STRING_LITERAL  reduce using rule 1 (empty -> .)
    CHAR_CONST      reduce using rule 1 (empty -> .)
    INT_CONST       reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    declaration                    shift and go to state 60
    zero_or_more_declarations      shift and go to state 113
    empty                          shift and go to state 59
    type_specifier                 shift and go to state 61

state 61

    (64) declaration -> type_specifier . optional_init_declarator_list SEMI
    (65) optional_init_declarator_list -> . empty
    (66) optional_init_declarator_list -> . init_declarator_list
    (1) empty -> .
    (67) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (68) init_declarator_list -> . init_declarator
    (69) init_declarator -> . declarator EQUALS initializer
    (70) init_declarator -> . declarator
    (12) declarator -> . declarator LPAREN optional_parameter_list RPAREN
    (13) declarator -> . LPAREN declarator RPAREN
    (14) declarator -> . declarator LBRACKET optional_constant_expression RBRACKET
    (15) declarator -> . identifier
    (48) identifier -> . ID
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 18
    ID              shift and go to state 21

    optional_init_declarator_list  shift and go to state 14
    empty                          shift and go to state 16
    init_declarator_list           shift and go to state 17
    init_declarator                shift and go to state 20
    declarator                     shift and go to state 63
    identifier                     shift and go to state 19

state 62

    (67) init_declarator_list -> init_declarator_list COMMA init_declarator .
    COMMA           reduce using rule 67 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 67 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 63

    (69) init_declarator -> declarator . EQUALS initializer
    (70) init_declarator -> declarator .
    (12) declarator -> declarator . LPAREN optional_parameter_list RPAREN
    (14) declarator -> declarator . LBRACKET optional_constant_expression RBRACKET
    EQUALS          shift and go to state 26
    COMMA           reduce using rule 70 (init_declarator -> declarator .)
    SEMI            reduce using rule 70 (init_declarator -> declarator .)
    LPAREN          shift and go to state 24
    LBRACKET        shift and go to state 25


state 64

    (13) declarator -> LPAREN declarator RPAREN .
    LPAREN          reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 13 (declarator -> LPAREN declarator RPAREN .)


state 65

    (12) declarator -> declarator LPAREN optional_parameter_list RPAREN .
    LPAREN          reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    LBRACKET        reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    EQUALS          reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    LBRACE          reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    COMMA           reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    SEMI            reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)
    RPAREN          reduce using rule 12 (declarator -> declarator LPAREN optional_parameter_list RPAREN .)


state 66

    (61) parameter_list -> parameter_list COMMA . parameter_declaration
    (63) parameter_declaration -> . type_specifier declarator
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12

    parameter_declaration          shift and go to state 114
    type_specifier                 shift and go to state 34

state 67

    (63) parameter_declaration -> type_specifier declarator .
    (12) declarator -> declarator . LPAREN optional_parameter_list RPAREN
    (14) declarator -> declarator . LBRACKET optional_constant_expression RBRACKET
    COMMA           reduce using rule 63 (parameter_declaration -> type_specifier declarator .)
    RPAREN          reduce using rule 63 (parameter_declaration -> type_specifier declarator .)
    LPAREN          shift and go to state 24
    LBRACKET        shift and go to state 25


state 68

    (14) declarator -> declarator LBRACKET optional_constant_expression RBRACKET .
    LPAREN          reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    LBRACKET        reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    EQUALS          reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    LBRACE          reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    COMMA           reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    SEMI            reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)
    RPAREN          reduce using rule 14 (declarator -> declarator LBRACKET optional_constant_expression RBRACKET .)


state 69

    (21) binary_expression -> binary_expression OR . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 115
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 70

    (22) binary_expression -> binary_expression AND . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 116
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 71

    (23) binary_expression -> binary_expression NE . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 117
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 72

    (24) binary_expression -> binary_expression EQ . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 118
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 73

    (25) binary_expression -> binary_expression GE . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 119
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 74

    (26) binary_expression -> binary_expression GT . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 120
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 75

    (27) binary_expression -> binary_expression LE . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 121
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 76

    (28) binary_expression -> binary_expression LT . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 122
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 77

    (29) binary_expression -> binary_expression MINUS . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 123
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 78

    (30) binary_expression -> binary_expression PLUS . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 124
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 79

    (31) binary_expression -> binary_expression MOD . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 125
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 80

    (32) binary_expression -> binary_expression DIVIDE . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 126
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 81

    (33) binary_expression -> binary_expression TIMES . binary_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    binary_expression              shift and go to state 127
    unary_expression               shift and go to state 41
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 82

    (35) unary_expression -> unary_operator unary_expression .
    OR              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    AND             reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    NE              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    EQ              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    GE              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    GT              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    LE              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    LT              reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    MINUS           reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    PLUS            reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    MOD             reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    DIVIDE          reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    TIMES           reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    RBRACKET        reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    EQUALS          reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    COMMA           reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    SEMI            reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    RPAREN          reduce using rule 35 (unary_expression -> unary_operator unary_expression .)
    RBRACE          reduce using rule 35 (unary_expression -> unary_operator unary_expression .)


state 83

    (37) postfix_expression -> postfix_expression LPAREN . optional_argument_expression RPAREN
    (40) optional_argument_expression -> . empty
    (41) optional_argument_expression -> . argument_expression
    (1) empty -> .
    (54) argument_expression -> . argument_expression COMMA assignment_expression
    (55) argument_expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RPAREN          reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    postfix_expression             shift and go to state 43
    optional_argument_expression   shift and go to state 128
    empty                          shift and go to state 129
    argument_expression            shift and go to state 130
    assignment_expression          shift and go to state 131
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 84

    (38) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    postfix_expression             shift and go to state 43
    expression                     shift and go to state 132
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 85

    (45) primary_expression -> LPAREN expression . RPAREN
    (52) expression -> expression . COMMA assignment_expression
    RPAREN          shift and go to state 133
    COMMA           shift and go to state 134


state 86

    (53) expression -> assignment_expression .
    RPAREN          reduce using rule 53 (expression -> assignment_expression .)
    COMMA           reduce using rule 53 (expression -> assignment_expression .)
    SEMI            reduce using rule 53 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 53 (expression -> assignment_expression .)


state 87

    (71) initializer -> LBRACE initializer_list . COMMA RBRACE
    (76) initializer_list -> initializer_list . COMMA initializer
    (75) optional_initializer_list -> initializer_list .
    COMMA           shift and go to state 135
    RBRACE          reduce using rule 75 (optional_initializer_list -> initializer_list .)


state 88

    (72) initializer -> LBRACE optional_initializer_list . RBRACE
    RBRACE          shift and go to state 136


state 89

    (77) initializer_list -> initializer .
    COMMA           reduce using rule 77 (initializer_list -> initializer .)
    RBRACE          reduce using rule 77 (initializer_list -> initializer .)


state 90

    (74) optional_initializer_list -> empty .
    RBRACE          reduce using rule 74 (optional_initializer_list -> empty .)


state 91

    (56) assignment_expression -> unary_expression EQUALS . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    unary_expression               shift and go to state 56
    assignment_expression          shift and go to state 137
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 92

    (78) compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements . RBRACE
    RBRACE          shift and go to state 138


state 93

    (81) zero_or_more_statements -> empty .
    (92) optional_expression -> empty .
    RBRACE          reduce using rule 81 (zero_or_more_statements -> empty .)
    SEMI            reduce using rule 92 (optional_expression -> empty .)


state 94

    (82) zero_or_more_statements -> statement . zero_or_more_statements
    (81) zero_or_more_statements -> . empty
    (82) zero_or_more_statements -> . statement zero_or_more_statements
    (1) empty -> .
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    statement                      shift and go to state 94
    zero_or_more_statements        shift and go to state 139
    empty                          shift and go to state 93
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    optional_expression            shift and go to state 105
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 95

    (83) statement -> read_statement .
    READ            reduce using rule 83 (statement -> read_statement .)
    PRINT           reduce using rule 83 (statement -> read_statement .)
    ASSERT          reduce using rule 83 (statement -> read_statement .)
    RETURN          reduce using rule 83 (statement -> read_statement .)
    BREAK           reduce using rule 83 (statement -> read_statement .)
    WHILE           reduce using rule 83 (statement -> read_statement .)
    FOR             reduce using rule 83 (statement -> read_statement .)
    IF              reduce using rule 83 (statement -> read_statement .)
    LBRACE          reduce using rule 83 (statement -> read_statement .)
    NOT             reduce using rule 83 (statement -> read_statement .)
    MINUS           reduce using rule 83 (statement -> read_statement .)
    PLUS            reduce using rule 83 (statement -> read_statement .)
    LPAREN          reduce using rule 83 (statement -> read_statement .)
    STRING_LITERAL  reduce using rule 83 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 83 (statement -> read_statement .)
    INT_CONST       reduce using rule 83 (statement -> read_statement .)
    ID              reduce using rule 83 (statement -> read_statement .)
    SEMI            reduce using rule 83 (statement -> read_statement .)
    RBRACE          reduce using rule 83 (statement -> read_statement .)
    ELSE            reduce using rule 83 (statement -> read_statement .)


state 96

    (84) statement -> print_statement .
    READ            reduce using rule 84 (statement -> print_statement .)
    PRINT           reduce using rule 84 (statement -> print_statement .)
    ASSERT          reduce using rule 84 (statement -> print_statement .)
    RETURN          reduce using rule 84 (statement -> print_statement .)
    BREAK           reduce using rule 84 (statement -> print_statement .)
    WHILE           reduce using rule 84 (statement -> print_statement .)
    FOR             reduce using rule 84 (statement -> print_statement .)
    IF              reduce using rule 84 (statement -> print_statement .)
    LBRACE          reduce using rule 84 (statement -> print_statement .)
    NOT             reduce using rule 84 (statement -> print_statement .)
    MINUS           reduce using rule 84 (statement -> print_statement .)
    PLUS            reduce using rule 84 (statement -> print_statement .)
    LPAREN          reduce using rule 84 (statement -> print_statement .)
    STRING_LITERAL  reduce using rule 84 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 84 (statement -> print_statement .)
    INT_CONST       reduce using rule 84 (statement -> print_statement .)
    ID              reduce using rule 84 (statement -> print_statement .)
    SEMI            reduce using rule 84 (statement -> print_statement .)
    RBRACE          reduce using rule 84 (statement -> print_statement .)
    ELSE            reduce using rule 84 (statement -> print_statement .)


state 97

    (85) statement -> assert_statement .
    READ            reduce using rule 85 (statement -> assert_statement .)
    PRINT           reduce using rule 85 (statement -> assert_statement .)
    ASSERT          reduce using rule 85 (statement -> assert_statement .)
    RETURN          reduce using rule 85 (statement -> assert_statement .)
    BREAK           reduce using rule 85 (statement -> assert_statement .)
    WHILE           reduce using rule 85 (statement -> assert_statement .)
    FOR             reduce using rule 85 (statement -> assert_statement .)
    IF              reduce using rule 85 (statement -> assert_statement .)
    LBRACE          reduce using rule 85 (statement -> assert_statement .)
    NOT             reduce using rule 85 (statement -> assert_statement .)
    MINUS           reduce using rule 85 (statement -> assert_statement .)
    PLUS            reduce using rule 85 (statement -> assert_statement .)
    LPAREN          reduce using rule 85 (statement -> assert_statement .)
    STRING_LITERAL  reduce using rule 85 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 85 (statement -> assert_statement .)
    INT_CONST       reduce using rule 85 (statement -> assert_statement .)
    ID              reduce using rule 85 (statement -> assert_statement .)
    SEMI            reduce using rule 85 (statement -> assert_statement .)
    RBRACE          reduce using rule 85 (statement -> assert_statement .)
    ELSE            reduce using rule 85 (statement -> assert_statement .)


state 98

    (86) statement -> jump_statement .
    READ            reduce using rule 86 (statement -> jump_statement .)
    PRINT           reduce using rule 86 (statement -> jump_statement .)
    ASSERT          reduce using rule 86 (statement -> jump_statement .)
    RETURN          reduce using rule 86 (statement -> jump_statement .)
    BREAK           reduce using rule 86 (statement -> jump_statement .)
    WHILE           reduce using rule 86 (statement -> jump_statement .)
    FOR             reduce using rule 86 (statement -> jump_statement .)
    IF              reduce using rule 86 (statement -> jump_statement .)
    LBRACE          reduce using rule 86 (statement -> jump_statement .)
    NOT             reduce using rule 86 (statement -> jump_statement .)
    MINUS           reduce using rule 86 (statement -> jump_statement .)
    PLUS            reduce using rule 86 (statement -> jump_statement .)
    LPAREN          reduce using rule 86 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 86 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 86 (statement -> jump_statement .)
    INT_CONST       reduce using rule 86 (statement -> jump_statement .)
    ID              reduce using rule 86 (statement -> jump_statement .)
    SEMI            reduce using rule 86 (statement -> jump_statement .)
    RBRACE          reduce using rule 86 (statement -> jump_statement .)
    ELSE            reduce using rule 86 (statement -> jump_statement .)


state 99

    (87) statement -> iteration_statement .
    READ            reduce using rule 87 (statement -> iteration_statement .)
    PRINT           reduce using rule 87 (statement -> iteration_statement .)
    ASSERT          reduce using rule 87 (statement -> iteration_statement .)
    RETURN          reduce using rule 87 (statement -> iteration_statement .)
    BREAK           reduce using rule 87 (statement -> iteration_statement .)
    WHILE           reduce using rule 87 (statement -> iteration_statement .)
    FOR             reduce using rule 87 (statement -> iteration_statement .)
    IF              reduce using rule 87 (statement -> iteration_statement .)
    LBRACE          reduce using rule 87 (statement -> iteration_statement .)
    NOT             reduce using rule 87 (statement -> iteration_statement .)
    MINUS           reduce using rule 87 (statement -> iteration_statement .)
    PLUS            reduce using rule 87 (statement -> iteration_statement .)
    LPAREN          reduce using rule 87 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 87 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 87 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 87 (statement -> iteration_statement .)
    ID              reduce using rule 87 (statement -> iteration_statement .)
    SEMI            reduce using rule 87 (statement -> iteration_statement .)
    RBRACE          reduce using rule 87 (statement -> iteration_statement .)
    ELSE            reduce using rule 87 (statement -> iteration_statement .)


state 100

    (88) statement -> selection_statement .
    READ            reduce using rule 88 (statement -> selection_statement .)
    PRINT           reduce using rule 88 (statement -> selection_statement .)
    ASSERT          reduce using rule 88 (statement -> selection_statement .)
    RETURN          reduce using rule 88 (statement -> selection_statement .)
    BREAK           reduce using rule 88 (statement -> selection_statement .)
    WHILE           reduce using rule 88 (statement -> selection_statement .)
    FOR             reduce using rule 88 (statement -> selection_statement .)
    IF              reduce using rule 88 (statement -> selection_statement .)
    LBRACE          reduce using rule 88 (statement -> selection_statement .)
    NOT             reduce using rule 88 (statement -> selection_statement .)
    MINUS           reduce using rule 88 (statement -> selection_statement .)
    PLUS            reduce using rule 88 (statement -> selection_statement .)
    LPAREN          reduce using rule 88 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 88 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 88 (statement -> selection_statement .)
    INT_CONST       reduce using rule 88 (statement -> selection_statement .)
    ID              reduce using rule 88 (statement -> selection_statement .)
    SEMI            reduce using rule 88 (statement -> selection_statement .)
    RBRACE          reduce using rule 88 (statement -> selection_statement .)
    ELSE            reduce using rule 88 (statement -> selection_statement .)


state 101

    (89) statement -> compound_statement .
    READ            reduce using rule 89 (statement -> compound_statement .)
    PRINT           reduce using rule 89 (statement -> compound_statement .)
    ASSERT          reduce using rule 89 (statement -> compound_statement .)
    RETURN          reduce using rule 89 (statement -> compound_statement .)
    BREAK           reduce using rule 89 (statement -> compound_statement .)
    WHILE           reduce using rule 89 (statement -> compound_statement .)
    FOR             reduce using rule 89 (statement -> compound_statement .)
    IF              reduce using rule 89 (statement -> compound_statement .)
    LBRACE          reduce using rule 89 (statement -> compound_statement .)
    NOT             reduce using rule 89 (statement -> compound_statement .)
    MINUS           reduce using rule 89 (statement -> compound_statement .)
    PLUS            reduce using rule 89 (statement -> compound_statement .)
    LPAREN          reduce using rule 89 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 89 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 89 (statement -> compound_statement .)
    INT_CONST       reduce using rule 89 (statement -> compound_statement .)
    ID              reduce using rule 89 (statement -> compound_statement .)
    SEMI            reduce using rule 89 (statement -> compound_statement .)
    RBRACE          reduce using rule 89 (statement -> compound_statement .)
    ELSE            reduce using rule 89 (statement -> compound_statement .)


state 102

    (90) statement -> expression_statement .
    READ            reduce using rule 90 (statement -> expression_statement .)
    PRINT           reduce using rule 90 (statement -> expression_statement .)
    ASSERT          reduce using rule 90 (statement -> expression_statement .)
    RETURN          reduce using rule 90 (statement -> expression_statement .)
    BREAK           reduce using rule 90 (statement -> expression_statement .)
    WHILE           reduce using rule 90 (statement -> expression_statement .)
    FOR             reduce using rule 90 (statement -> expression_statement .)
    IF              reduce using rule 90 (statement -> expression_statement .)
    LBRACE          reduce using rule 90 (statement -> expression_statement .)
    NOT             reduce using rule 90 (statement -> expression_statement .)
    MINUS           reduce using rule 90 (statement -> expression_statement .)
    PLUS            reduce using rule 90 (statement -> expression_statement .)
    LPAREN          reduce using rule 90 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 90 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 90 (statement -> expression_statement .)
    INT_CONST       reduce using rule 90 (statement -> expression_statement .)
    ID              reduce using rule 90 (statement -> expression_statement .)
    SEMI            reduce using rule 90 (statement -> expression_statement .)
    RBRACE          reduce using rule 90 (statement -> expression_statement .)
    ELSE            reduce using rule 90 (statement -> expression_statement .)


state 103

    (103) read_statement -> READ . LPAREN argument_expression RPAREN SEMI
    LPAREN          shift and go to state 140


state 104

    (102) print_statement -> PRINT . LPAREN optional_expression RPAREN SEMI
    LPAREN          shift and go to state 141


state 105

    (91) expression_statement -> optional_expression . SEMI
    SEMI            shift and go to state 142


state 106

    (101) assert_statement -> ASSERT . expression SEMI
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 143
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 107

    (93) optional_expression -> expression .
    (52) expression -> expression . COMMA assignment_expression
    SEMI            reduce using rule 93 (optional_expression -> expression .)
    RPAREN          reduce using rule 93 (optional_expression -> expression .)
    COMMA           shift and go to state 134


state 108

    (99) jump_statement -> RETURN . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 144
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 109

    (100) jump_statement -> BREAK . SEMI
    SEMI            shift and go to state 146


state 110

    (96) iteration_statement -> WHILE . LPAREN expression RPAREN statement
    LPAREN          shift and go to state 147


state 111

    (97) iteration_statement -> FOR . LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> FOR . LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    LPAREN          shift and go to state 148


state 112

    (94) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> IF . LPAREN expression RPAREN statement
    LPAREN          shift and go to state 149


state 113

    (80) zero_or_more_declarations -> declaration zero_or_more_declarations .
    READ            reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    PRINT           reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    ASSERT          reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    RETURN          reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    BREAK           reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    WHILE           reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    FOR             reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    IF              reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    LBRACE          reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    NOT             reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    MINUS           reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    PLUS            reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    LPAREN          reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    STRING_LITERAL  reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    CHAR_CONST      reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    INT_CONST       reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    ID              reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    RBRACE          reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)
    SEMI            reduce using rule 80 (zero_or_more_declarations -> declaration zero_or_more_declarations .)


state 114

    (61) parameter_list -> parameter_list COMMA parameter_declaration .
    COMMA           reduce using rule 61 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 61 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 115

    (21) binary_expression -> binary_expression OR binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    AND             reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 21 (binary_expression -> binary_expression OR binary_expression .)
    NE              shift and go to state 71
    EQ              shift and go to state 72
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 116

    (22) binary_expression -> binary_expression AND binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 22 (binary_expression -> binary_expression AND binary_expression .)
    NE              shift and go to state 71
    EQ              shift and go to state 72
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 117

    (23) binary_expression -> binary_expression NE binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 23 (binary_expression -> binary_expression NE binary_expression .)
    EQ              shift and go to state 72
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 118

    (24) binary_expression -> binary_expression EQ binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 24 (binary_expression -> binary_expression EQ binary_expression .)
    GE              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 75
    LT              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 119

    (25) binary_expression -> binary_expression GE binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 25 (binary_expression -> binary_expression GE binary_expression .)
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 120

    (26) binary_expression -> binary_expression GT binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 26 (binary_expression -> binary_expression GT binary_expression .)
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 121

    (27) binary_expression -> binary_expression LE binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 27 (binary_expression -> binary_expression LE binary_expression .)
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 122

    (28) binary_expression -> binary_expression LT binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 28 (binary_expression -> binary_expression LT binary_expression .)
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 123

    (29) binary_expression -> binary_expression MINUS binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 29 (binary_expression -> binary_expression MINUS binary_expression .)
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 124

    (30) binary_expression -> binary_expression PLUS binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 30 (binary_expression -> binary_expression PLUS binary_expression .)
    MOD             shift and go to state 79
    DIVIDE          shift and go to state 80
    TIMES           shift and go to state 81


state 125

    (31) binary_expression -> binary_expression MOD binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 31 (binary_expression -> binary_expression MOD binary_expression .)


state 126

    (32) binary_expression -> binary_expression DIVIDE binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             shift and go to state 79


state 127

    (33) binary_expression -> binary_expression TIMES binary_expression .
    (21) binary_expression -> binary_expression . OR binary_expression
    (22) binary_expression -> binary_expression . AND binary_expression
    (23) binary_expression -> binary_expression . NE binary_expression
    (24) binary_expression -> binary_expression . EQ binary_expression
    (25) binary_expression -> binary_expression . GE binary_expression
    (26) binary_expression -> binary_expression . GT binary_expression
    (27) binary_expression -> binary_expression . LE binary_expression
    (28) binary_expression -> binary_expression . LT binary_expression
    (29) binary_expression -> binary_expression . MINUS binary_expression
    (30) binary_expression -> binary_expression . PLUS binary_expression
    (31) binary_expression -> binary_expression . MOD binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . TIMES binary_expression
    OR              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             shift and go to state 79


state 128

    (37) postfix_expression -> postfix_expression LPAREN optional_argument_expression . RPAREN
    RPAREN          shift and go to state 150


state 129

    (40) optional_argument_expression -> empty .
    RPAREN          reduce using rule 40 (optional_argument_expression -> empty .)


state 130

    (41) optional_argument_expression -> argument_expression .
    (54) argument_expression -> argument_expression . COMMA assignment_expression
    RPAREN          reduce using rule 41 (optional_argument_expression -> argument_expression .)
    COMMA           shift and go to state 151


state 131

    (55) argument_expression -> assignment_expression .
    COMMA           reduce using rule 55 (argument_expression -> assignment_expression .)
    RPAREN          reduce using rule 55 (argument_expression -> assignment_expression .)


state 132

    (38) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (52) expression -> expression . COMMA assignment_expression
    RBRACKET        shift and go to state 152
    COMMA           shift and go to state 134


state 133

    (45) primary_expression -> LPAREN expression RPAREN .
    LPAREN          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 45 (primary_expression -> LPAREN expression RPAREN .)


state 134

    (52) expression -> expression COMMA . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    assignment_expression          shift and go to state 153
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 135

    (71) initializer -> LBRACE initializer_list COMMA . RBRACE
    (76) initializer_list -> initializer_list COMMA . initializer
    (71) initializer -> . LBRACE initializer_list COMMA RBRACE
    (72) initializer -> . LBRACE optional_initializer_list RBRACE
    (73) initializer -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RBRACE          shift and go to state 154
    LBRACE          shift and go to state 54
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    initializer                    shift and go to state 155
    assignment_expression          shift and go to state 55
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 136

    (72) initializer -> LBRACE optional_initializer_list RBRACE .
    COMMA           reduce using rule 72 (initializer -> LBRACE optional_initializer_list RBRACE .)
    SEMI            reduce using rule 72 (initializer -> LBRACE optional_initializer_list RBRACE .)
    RBRACE          reduce using rule 72 (initializer -> LBRACE optional_initializer_list RBRACE .)


state 137

    (56) assignment_expression -> unary_expression EQUALS assignment_expression .
    COMMA           reduce using rule 56 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    SEMI            reduce using rule 56 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RPAREN          reduce using rule 56 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RBRACE          reduce using rule 56 (assignment_expression -> unary_expression EQUALS assignment_expression .)
    RBRACKET        reduce using rule 56 (assignment_expression -> unary_expression EQUALS assignment_expression .)


state 138

    (78) compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .
    INT             reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    CHAR            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    VOID            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    $end            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    READ            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    PRINT           reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    ASSERT          reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    RETURN          reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    BREAK           reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    WHILE           reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    FOR             reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    IF              reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    LBRACE          reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    NOT             reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    MINUS           reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    PLUS            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    LPAREN          reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    STRING_LITERAL  reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    CHAR_CONST      reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    INT_CONST       reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    ID              reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    SEMI            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    RBRACE          reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)
    ELSE            reduce using rule 78 (compound_statement -> LBRACE zero_or_more_declarations zero_or_more_statements RBRACE .)


state 139

    (82) zero_or_more_statements -> statement zero_or_more_statements .
    RBRACE          reduce using rule 82 (zero_or_more_statements -> statement zero_or_more_statements .)


state 140

    (103) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (54) argument_expression -> . argument_expression COMMA assignment_expression
    (55) argument_expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    argument_expression            shift and go to state 156
    assignment_expression          shift and go to state 131
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 141

    (102) print_statement -> PRINT LPAREN . optional_expression RPAREN SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RPAREN          reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 157
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 142

    (91) expression_statement -> optional_expression SEMI .
    READ            reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    PRINT           reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    ASSERT          reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    RETURN          reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    BREAK           reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    WHILE           reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    FOR             reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    IF              reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    LBRACE          reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    NOT             reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    MINUS           reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    PLUS            reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    LPAREN          reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    STRING_LITERAL  reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    CHAR_CONST      reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    INT_CONST       reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    ID              reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    SEMI            reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    RBRACE          reduce using rule 91 (expression_statement -> optional_expression SEMI .)
    ELSE            reduce using rule 91 (expression_statement -> optional_expression SEMI .)


state 143

    (101) assert_statement -> ASSERT expression . SEMI
    (52) expression -> expression . COMMA assignment_expression
    SEMI            shift and go to state 158
    COMMA           shift and go to state 134


state 144

    (99) jump_statement -> RETURN optional_expression . SEMI
    SEMI            shift and go to state 159


state 145

    (92) optional_expression -> empty .
    SEMI            reduce using rule 92 (optional_expression -> empty .)
    RPAREN          reduce using rule 92 (optional_expression -> empty .)


state 146

    (100) jump_statement -> BREAK SEMI .
    READ            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 100 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 100 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 100 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 100 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 100 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 100 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 100 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 100 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 100 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 100 (jump_statement -> BREAK SEMI .)


state 147

    (96) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 160
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 148

    (97) iteration_statement -> FOR LPAREN . declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> FOR LPAREN . optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (64) declaration -> . type_specifier optional_init_declarator_list SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (9) type_specifier -> . INT
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . VOID
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    INT             shift and go to state 10
    CHAR            shift and go to state 11
    VOID            shift and go to state 12
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    declaration                    shift and go to state 161
    optional_expression            shift and go to state 162
    type_specifier                 shift and go to state 61
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 149

    (94) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (95) selection_statement -> IF LPAREN . expression RPAREN statement
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 163
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 150

    (37) postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .
    LPAREN          reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    LBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    OR              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    AND             reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    NE              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    EQ              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    GE              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    GT              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    LE              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    LT              reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    MINUS           reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    PLUS            reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    MOD             reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    DIVIDE          reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    TIMES           reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    RBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    EQUALS          reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    COMMA           reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    SEMI            reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    RPAREN          reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)
    RBRACE          reduce using rule 37 (postfix_expression -> postfix_expression LPAREN optional_argument_expression RPAREN .)


state 151

    (54) argument_expression -> argument_expression COMMA . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    assignment_expression          shift and go to state 164
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 152

    (38) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .
    LPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 38 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 153

    (52) expression -> expression COMMA assignment_expression .
    RPAREN          reduce using rule 52 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 52 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 52 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 52 (expression -> expression COMMA assignment_expression .)


state 154

    (71) initializer -> LBRACE initializer_list COMMA RBRACE .
    COMMA           reduce using rule 71 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 71 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 71 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 155

    (76) initializer_list -> initializer_list COMMA initializer .
    COMMA           reduce using rule 76 (initializer_list -> initializer_list COMMA initializer .)
    RBRACE          reduce using rule 76 (initializer_list -> initializer_list COMMA initializer .)


state 156

    (103) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (54) argument_expression -> argument_expression . COMMA assignment_expression
    RPAREN          shift and go to state 165
    COMMA           shift and go to state 151


state 157

    (102) print_statement -> PRINT LPAREN optional_expression . RPAREN SEMI
    RPAREN          shift and go to state 166


state 158

    (101) assert_statement -> ASSERT expression SEMI .
    READ            reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    STRING_LITERAL  reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 101 (assert_statement -> ASSERT expression SEMI .)


state 159

    (99) jump_statement -> RETURN optional_expression SEMI .
    READ            reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    PRINT           reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    ASSERT          reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    RETURN          reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    BREAK           reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    WHILE           reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    FOR             reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    IF              reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    LBRACE          reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    NOT             reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    MINUS           reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    PLUS            reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    LPAREN          reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    STRING_LITERAL  reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    CHAR_CONST      reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    INT_CONST       reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    ID              reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    SEMI            reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    RBRACE          reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)
    ELSE            reduce using rule 99 (jump_statement -> RETURN optional_expression SEMI .)


state 160

    (96) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (52) expression -> expression . COMMA assignment_expression
    RPAREN          shift and go to state 167
    COMMA           shift and go to state 134


state 161

    (97) iteration_statement -> FOR LPAREN declaration . optional_expression SEMI optional_expression RPAREN statement
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 168
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 162

    (98) iteration_statement -> FOR LPAREN optional_expression . SEMI optional_expression SEMI optional_expression RPAREN statement
    SEMI            shift and go to state 169


state 163

    (94) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (95) selection_statement -> IF LPAREN expression . RPAREN statement
    (52) expression -> expression . COMMA assignment_expression
    RPAREN          shift and go to state 170
    COMMA           shift and go to state 134


state 164

    (54) argument_expression -> argument_expression COMMA assignment_expression .
    COMMA           reduce using rule 54 (argument_expression -> argument_expression COMMA assignment_expression .)
    RPAREN          reduce using rule 54 (argument_expression -> argument_expression COMMA assignment_expression .)


state 165

    (103) read_statement -> READ LPAREN argument_expression RPAREN . SEMI
    SEMI            shift and go to state 171


state 166

    (102) print_statement -> PRINT LPAREN optional_expression RPAREN . SEMI
    SEMI            shift and go to state 172


state 167

    (96) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 107
    statement                      shift and go to state 173
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    optional_expression            shift and go to state 105
    empty                          shift and go to state 145
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 168

    (97) iteration_statement -> FOR LPAREN declaration optional_expression . SEMI optional_expression RPAREN statement
    SEMI            shift and go to state 174


state 169

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI . optional_expression SEMI optional_expression RPAREN statement
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 175
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 170

    (94) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (95) selection_statement -> IF LPAREN expression RPAREN . statement
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 107
    statement                      shift and go to state 176
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    optional_expression            shift and go to state 105
    empty                          shift and go to state 145
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 171

    (103) read_statement -> READ LPAREN argument_expression RPAREN SEMI .
    READ            reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 103 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 172

    (102) print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .
    READ            reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    PRINT           reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    ASSERT          reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    RETURN          reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    BREAK           reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    WHILE           reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    FOR             reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    IF              reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    LBRACE          reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    NOT             reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    MINUS           reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    PLUS            reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    LPAREN          reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    ID              reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    SEMI            reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    RBRACE          reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)
    ELSE            reduce using rule 102 (print_statement -> PRINT LPAREN optional_expression RPAREN SEMI .)


state 173

    (96) iteration_statement -> WHILE LPAREN expression RPAREN statement .
    READ            reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 96 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 174

    (97) iteration_statement -> FOR LPAREN declaration optional_expression SEMI . optional_expression RPAREN statement
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RPAREN          reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 177
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 175

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression . SEMI optional_expression RPAREN statement
    SEMI            shift and go to state 178


state 176

    (94) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (95) selection_statement -> IF LPAREN expression RPAREN statement .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 179
    READ            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 95 (selection_statement -> IF LPAREN expression RPAREN statement .)


state 177

    (97) iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression . RPAREN statement
    RPAREN          shift and go to state 180


state 178

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI . optional_expression RPAREN statement
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    RPAREN          reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 181
    empty                          shift and go to state 145
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 179

    (94) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    expression                     shift and go to state 107
    statement                      shift and go to state 182
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    optional_expression            shift and go to state 105
    empty                          shift and go to state 145
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 180

    (97) iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN . statement
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 105
    statement                      shift and go to state 183
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    expression                     shift and go to state 107
    empty                          shift and go to state 145
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 181

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression . RPAREN statement
    RPAREN          shift and go to state 184


state 182

    (94) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .
    READ            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 94 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 183

    (97) iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .
    READ            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    PRINT           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    ASSERT          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    RETURN          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    BREAK           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    WHILE           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    FOR             reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    IF              reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    LBRACE          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    NOT             reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    MINUS           reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    PLUS            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    LPAREN          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    CHAR_CONST      reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    INT_CONST       reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    ID              reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    SEMI            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    RBRACE          reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)
    ELSE            reduce using rule 97 (iteration_statement -> FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement .)


state 184

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN . statement
    (83) statement -> . read_statement
    (84) statement -> . print_statement
    (85) statement -> . assert_statement
    (86) statement -> . jump_statement
    (87) statement -> . iteration_statement
    (88) statement -> . selection_statement
    (89) statement -> . compound_statement
    (90) statement -> . expression_statement
    (103) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (102) print_statement -> . PRINT LPAREN optional_expression RPAREN SEMI
    (101) assert_statement -> . ASSERT expression SEMI
    (99) jump_statement -> . RETURN optional_expression SEMI
    (100) jump_statement -> . BREAK SEMI
    (96) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (97) iteration_statement -> . FOR LPAREN declaration optional_expression SEMI optional_expression RPAREN statement
    (98) iteration_statement -> . FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement
    (94) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (95) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) compound_statement -> . LBRACE zero_or_more_declarations zero_or_more_statements RBRACE
    (91) expression_statement -> . optional_expression SEMI
    (92) optional_expression -> . empty
    (93) optional_expression -> . expression
    (1) empty -> .
    (52) expression -> . expression COMMA assignment_expression
    (53) expression -> . assignment_expression
    (56) assignment_expression -> . unary_expression EQUALS assignment_expression
    (57) assignment_expression -> . binary_expression
    (35) unary_expression -> . unary_operator unary_expression
    (36) unary_expression -> . postfix_expression
    (21) binary_expression -> . binary_expression OR binary_expression
    (22) binary_expression -> . binary_expression AND binary_expression
    (23) binary_expression -> . binary_expression NE binary_expression
    (24) binary_expression -> . binary_expression EQ binary_expression
    (25) binary_expression -> . binary_expression GE binary_expression
    (26) binary_expression -> . binary_expression GT binary_expression
    (27) binary_expression -> . binary_expression LE binary_expression
    (28) binary_expression -> . binary_expression LT binary_expression
    (29) binary_expression -> . binary_expression MINUS binary_expression
    (30) binary_expression -> . binary_expression PLUS binary_expression
    (31) binary_expression -> . binary_expression MOD binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression TIMES binary_expression
    (34) binary_expression -> . unary_expression
    (58) unary_operator -> . NOT
    (59) unary_operator -> . MINUS
    (60) unary_operator -> . PLUS
    (37) postfix_expression -> . postfix_expression LPAREN optional_argument_expression RPAREN
    (38) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (39) postfix_expression -> . primary_expression
    (42) primary_expression -> . string
    (43) primary_expression -> . constant
    (44) primary_expression -> . identifier
    (45) primary_expression -> . LPAREN expression RPAREN
    (49) string -> . STRING_LITERAL
    (46) constant -> . CHAR_CONST
    (47) constant -> . INT_CONST
    (48) identifier -> . ID
    READ            shift and go to state 103
    PRINT           shift and go to state 104
    ASSERT          shift and go to state 106
    RETURN          shift and go to state 108
    BREAK           shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111
    IF              shift and go to state 112
    LBRACE          shift and go to state 27
    SEMI            reduce using rule 1 (empty -> .)
    NOT             shift and go to state 44
    MINUS           shift and go to state 39
    PLUS            shift and go to state 40
    LPAREN          shift and go to state 45
    STRING_LITERAL  shift and go to state 50
    CHAR_CONST      shift and go to state 51
    INT_CONST       shift and go to state 52
    ID              shift and go to state 21

    optional_expression            shift and go to state 105
    statement                      shift and go to state 185
    read_statement                 shift and go to state 95
    print_statement                shift and go to state 96
    assert_statement               shift and go to state 97
    jump_statement                 shift and go to state 98
    iteration_statement            shift and go to state 99
    selection_statement            shift and go to state 100
    compound_statement             shift and go to state 101
    expression_statement           shift and go to state 102
    expression                     shift and go to state 107
    empty                          shift and go to state 145
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 56
    binary_expression              shift and go to state 57
    unary_operator                 shift and go to state 42
    postfix_expression             shift and go to state 43
    primary_expression             shift and go to state 46
    string                         shift and go to state 47
    constant                       shift and go to state 48
    identifier                     shift and go to state 49

state 185

    (98) iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .
    READ            reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    PRINT           reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    ASSERT          reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    RETURN          reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    BREAK           reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    WHILE           reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    FOR             reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    IF              reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    LBRACE          reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    NOT             reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    MINUS           reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    PLUS            reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    LPAREN          reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    CHAR_CONST      reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    INT_CONST       reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    ID              reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    SEMI            reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    RBRACE          reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)
    ELSE            reduce using rule 98 (iteration_statement -> FOR LPAREN optional_expression SEMI optional_expression SEMI optional_expression RPAREN statement .)


Conflicts:

shift/reduce conflict for ELSE in state 176 resolved as shift