============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.2, pluggy-1.5.0
rootdir: /workspaces/university-mc921/p4-codegen-217787_233539
configfile: pyproject.toml
collected 25 items

tests/test_code.py ..F..............FF..FFFF                             [100%]

=================================== FAILURES ===================================
________________________________ test_code[t03] ________________________________

test_name = 't03'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd6ac6d0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd6d1cf0>
expr_test = '%10', true_target = '%if.then.1', false_target = '%if.else.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
            self.pc = self.vars[true_target]
        else:
>           self.pc = self.vars[false_target]
E           KeyError: '%if.else.1'

uc/uc_interpreter.py:470: KeyError
________________________________ test_code[t18] ________________________________

test_name = 't18'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd6ad000>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd6d0ac0>
expr_test = '%13', true_target = '%if.then.1', false_target = '%if.else.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%if.then.1'

uc/uc_interpreter.py:468: KeyError
________________________________ test_code[t19] ________________________________

test_name = 't19'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd3e5e40>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd54d9c0>
expr_test = '%13', true_target = '%if.then.1', false_target = '%if.else.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%if.then.1'

uc/uc_interpreter.py:468: KeyError
________________________________ test_code[t22] ________________________________

test_name = 't22'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd6d1420>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd08e320>
expr_test = '%17', true_target = '%for.body.1', false_target = '%for.end.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%for.body.1'

uc/uc_interpreter.py:468: KeyError
----------------------------- Captured stdout call -----------------------------
Array Before Removing Duplicates: 
1 2 2 3 4 5 6 7 7 8 9 
________________________________ test_code[t23] ________________________________

test_name = 't23'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd07f370>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd08e020>
expr_test = '%39', true_target = '%for.body.4', false_target = '%for.end.4'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%for.body.4'

uc/uc_interpreter.py:468: KeyError
----------------------------- Captured stdout call -----------------------------
Enter number of elements
Enter 25 integers
25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
________________________________ test_code[t24] ________________________________

test_name = 't24'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd07f2b0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dd052440>
expr_test = '%41', true_target = '%for.body.4', false_target = '%for.end.4'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%for.body.4'

uc/uc_interpreter.py:468: KeyError
----------------------------- Captured stdout call -----------------------------
Enter number of elements
Enter 50 integers
0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 
________________________________ test_code[t25] ________________________________

test_name = 't25'
capsys = <_pytest.capture.CaptureFixture object at 0x7fe8dd54eec0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fe8dceb5360>
expr_test = '%11', true_target = '%for.body.2', false_target = '%for.end.2'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%for.body.2'

uc/uc_interpreter.py:468: KeyError
----------------------------- Captured stdout call -----------------------------
Enter rows and columns:
Enter matrix elements:
=========================== short test summary info ============================
FAILED tests/test_code.py::test_code[t03] - KeyError: '%if.else.1'
FAILED tests/test_code.py::test_code[t18] - KeyError: '%if.then.1'
FAILED tests/test_code.py::test_code[t19] - KeyError: '%if.then.1'
FAILED tests/test_code.py::test_code[t22] - KeyError: '%for.body.1'
FAILED tests/test_code.py::test_code[t23] - KeyError: '%for.body.4'
FAILED tests/test_code.py::test_code[t24] - KeyError: '%for.body.4'
FAILED tests/test_code.py::test_code[t25] - KeyError: '%for.body.2'
========================= 7 failed, 18 passed in 0.59s =========================
