============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.2, pluggy-1.5.0
rootdir: /workspaces/university-mc921/p4-codegen-217787_233539
configfile: pyproject.toml
collected 25 items

tests/test_code.py ...................FFFFFF                             [100%]

=================================== FAILURES ===================================
________________________________ test_code[t20] ________________________________

test_name = 't20'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc233d6c20>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
                vm.run(gencode)
            captured = capsys.readouterr()
            assert sys_error.value.code == 0
            expect = f_ex.read()
>       assert captured.out == expect
E       AssertionError: assert 'Isto é um teste: t xpto  ' == 'Isto é um teste: t 2 2'
E         
E         - Isto é um teste: t 2 2
E         ?                    ^^^
E         + Isto é um teste: t xpto  
E         ?                    ^^^^^^

tests/test_code.py:80: AssertionError
________________________________ test_code[t21] ________________________________

test_name = 't21'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc237f7880>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:332: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7fcc23965090>
node = GlobalDecl(decls=[Decl(name=ID(name=v,
                               scope=<uc.uc_sema.SymbolTableEntry object at 0x7...                                ],
                                     uc_type=type(Array<int>))),
                 ])

    def visit_GlobalDecl(self, node: GlobalDecl):
        """
        Visit each global declaration that are not function declarations. Indeed, it is usually simpler to visit the function declaration when visiting the definition of the function to generate all code at once.
        """
        for _decl in node.decls:
            if not isinstance(_decl, FuncDecl) and not isinstance(_decl.type, FuncDecl):
                self.visit(_decl)
    
                gen_location = f'@{_decl.name.name}'
                _id: ID = _decl.name
                _id.scope.gen_location = gen_location
                var_type = _decl.type.uc_type.typename
                inst = (f"global_{var_type}", gen_location)
    
                if hasattr(_decl, "init"):
                    parsed_value = self.parse_literal_values(
>                       _decl.init.value, var_type)
E                   AttributeError: 'InitList' object has no attribute 'value'

uc/uc_code.py:428: AttributeError
________________________________ test_code[t22] ________________________________

test_name = 't22'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc23781db0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:332: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7fcc23acacb0>
node = GlobalDecl(decls=[Decl(name=ID(name=arr,
                               scope=<uc.uc_sema.SymbolTableEntry object at 0...                                ],
                                     uc_type=type(Array<int>))),
                 ])

    def visit_GlobalDecl(self, node: GlobalDecl):
        """
        Visit each global declaration that are not function declarations. Indeed, it is usually simpler to visit the function declaration when visiting the definition of the function to generate all code at once.
        """
        for _decl in node.decls:
            if not isinstance(_decl, FuncDecl) and not isinstance(_decl.type, FuncDecl):
                self.visit(_decl)
    
                gen_location = f'@{_decl.name.name}'
                _id: ID = _decl.name
                _id.scope.gen_location = gen_location
                var_type = _decl.type.uc_type.typename
                inst = (f"global_{var_type}", gen_location)
    
                if hasattr(_decl, "init"):
                    parsed_value = self.parse_literal_values(
>                       _decl.init.value, var_type)
E                   AttributeError: 'InitList' object has no attribute 'value'

uc/uc_code.py:428: AttributeError
________________________________ test_code[t23] ________________________________

test_name = 't23'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc23791390>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
                vm.run(gencode)
            captured = capsys.readouterr()
            assert sys_error.value.code == 0
            expect = f_ex.read()
>       assert captured.out == expect
E       AssertionError: assert 'Enter number... 0 0 0 0 0 0 ' == 'Enter number... 22 23 24 25 '
E         
E         Skipping 33 identical leading characters in diff, use -v to show
E            integers
E         - 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
E         + 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
E           Sorted list in ascending order:
E         - 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
E         + 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

tests/test_code.py:80: AssertionError
________________________________ test_code[t24] ________________________________

test_name = 't24'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc23966f80>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
                vm.run(gencode)
            captured = capsys.readouterr()
            assert sys_error.value.code == 0
            expect = f_ex.read()
>       assert captured.out == expect
E       AssertionError: assert 'Enter number... 0 0 0 0 0 0 ' == 'Enter number... 11 12 12 12 '
E         
E         Skipping 35 identical leading characters in diff, use -v to show
E           ntegers
E         - 0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 12 6 0 7 1 8 2 9 3 10 4 11 5 
E         + 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
E           Sorted list in ascending order:
E         - 0 0 0 0 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 
E         + 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

tests/test_code.py:80: AssertionError
________________________________ test_code[t25] ________________________________

test_name = 't25'
capsys = <_pytest.capture.CaptureFixture object at 0x7fcc233b6bc0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
                vm.run(gencode)
            captured = capsys.readouterr()
            assert sys_error.value.code == 0
            expect = f_ex.read()
>       assert captured.out == expect
E       AssertionError: assert 'Enter rows a... 0 0 0 0 0 \n' == 'Enter rows a... 0 0 0 0 0 \n'
E         
E         Skipping 74 identical leading characters in diff, use -v to show
E            0 0 0 0 
E         - 1 2 3 4 5 6 7 8 9 0 
E         - 2 4 6 8 0 2 4 6 8 0 
E         - 3 6 9 2 5 8 1 4 7 0 
E         - 4 8 2 6 0 4 8 2 6 0 ...
E         
E         ...Full output truncated (34 lines hidden), use '-vv' to show

tests/test_code.py:80: AssertionError
=========================== short test summary info ============================
FAILED tests/test_code.py::test_code[t20] - AssertionError: assert 'Isto é um...
FAILED tests/test_code.py::test_code[t21] - AttributeError: 'InitList' object...
FAILED tests/test_code.py::test_code[t22] - AttributeError: 'InitList' object...
FAILED tests/test_code.py::test_code[t23] - AssertionError: assert 'Enter num...
FAILED tests/test_code.py::test_code[t24] - AssertionError: assert 'Enter num...
FAILED tests/test_code.py::test_code[t25] - AssertionError: assert 'Enter row...
======================== 6 failed, 19 passed in 13.40s =========================
