============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.2, pluggy-1.5.0
rootdir: /workspaces/university-mc921/p4-codegen-217787_233539
configfile: pyproject.toml
collected 25 items

tests/test_code.py ...................FFFFFF                             [100%]

=================================== FAILURES ===================================
________________________________ test_code[t20] ________________________________

test_name = 't20'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea1e2650>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:304: in visit_FuncDef
    self.visit(node.body)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:519: in visit_Compound
    self.visit(statment)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:207: in visit_Print
    self.visit(expr)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_sema.py:171: in generic_visit
    self.visit(child)
uc/uc_sema.py:164: in visit
    return visitor(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea1e2c20>
node = ID(name=s,
   scope=<uc.uc_sema.SymbolTableEntry object at 0x7f63ea4f5840>,
   uc_type=type(Array<char>),
   gen_location=%4)

    def visit_ID(self, node: ID):
        if hasattr(node, "parent") and \
                isinstance(node.parent, Decl) or isinstance(node.parent, Assignment):
            # Handle code generation for declarions on Decl node
            node.gen_location = node.scope.gen_location
        else:
            # BRUNO TODO: I think that is not the best function to load the
            # the function description in the notebook has no metion about this
            node.gen_location = self.new_temp()
            # If a global or constant var use @
>           _var_name = f'{node.scope.gen_location}'
E           AttributeError: 'SymbolTableEntry' object has no attribute 'gen_location'

uc/uc_code.py:670: AttributeError
________________________________ test_code[t21] ________________________________

test_name = 't21'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea1fe470>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea1c0910>
node = GlobalDecl(decls=[Decl(name=ID(name=v,
                               scope=<uc.uc_sema.SymbolTableEntry object at 0x7...                                ],
                                     uc_type=type(Array<int>))),
                 ])

    def visit_GlobalDecl(self, node: GlobalDecl):
        """
        Visit each global declaration that are not function declarations. Indeed, it is usually simpler to visit the function declaration when visiting the definition of the function to generate all code at once.
        """
        for _decl in node.decls:
            if not isinstance(_decl, FuncDecl) and not isinstance(_decl.type, FuncDecl):
                self.visit(_decl)
    
                gen_location = f'@{_decl.name.name}'
                _id: ID = _decl.name
                _id.scope.gen_location = gen_location
                var_type = _decl.type.uc_type.typename
                inst = (f"global_{var_type}", gen_location)
    
                if hasattr(_decl, "init"):
                    parsed_value = self.parse_literal_values(
>                       _decl.init.value, var_type)
E                   AttributeError: 'InitList' object has no attribute 'value'

uc/uc_code.py:352: AttributeError
________________________________ test_code[t22] ________________________________

test_name = 't22'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea18a2f0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea4f4940>
node = GlobalDecl(decls=[Decl(name=ID(name=arr,
                               scope=<uc.uc_sema.SymbolTableEntry object at 0...                                ],
                                     uc_type=type(Array<int>))),
                 ])

    def visit_GlobalDecl(self, node: GlobalDecl):
        """
        Visit each global declaration that are not function declarations. Indeed, it is usually simpler to visit the function declaration when visiting the definition of the function to generate all code at once.
        """
        for _decl in node.decls:
            if not isinstance(_decl, FuncDecl) and not isinstance(_decl.type, FuncDecl):
                self.visit(_decl)
    
                gen_location = f'@{_decl.name.name}'
                _id: ID = _decl.name
                _id.scope.gen_location = gen_location
                var_type = _decl.type.uc_type.typename
                inst = (f"global_{var_type}", gen_location)
    
                if hasattr(_decl, "init"):
                    parsed_value = self.parse_literal_values(
>                       _decl.init.value, var_type)
E                   AttributeError: 'InitList' object has no attribute 'value'

uc/uc_code.py:352: AttributeError
________________________________ test_code[t23] ________________________________

test_name = 't23'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea189750>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:304: in visit_FuncDef
    self.visit(node.body)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:519: in visit_Compound
    self.visit(statment)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:212: in visit_Print
    self.visit(node.expr)
uc/uc_sema.py:163: in visit
    self.anotate_parent_visit(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea252cb0>, node = None

    def anotate_parent_visit(self, node):
>       for _, child in node.children():
E       AttributeError: 'NoneType' object has no attribute 'children'

uc/uc_sema.py:174: AttributeError
________________________________ test_code[t24] ________________________________

test_name = 't24'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea5a9c90>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:304: in visit_FuncDef
    self.visit(node.body)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:519: in visit_Compound
    self.visit(statment)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:212: in visit_Print
    self.visit(node.expr)
uc/uc_sema.py:163: in visit
    self.anotate_parent_visit(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea260a00>, node = None

    def anotate_parent_visit(self, node):
>       for _, child in node.children():
E       AttributeError: 'NoneType' object has no attribute 'children'

uc/uc_sema.py:174: AttributeError
________________________________ test_code[t25] ________________________________

test_name = 't25'
capsys = <_pytest.capture.CaptureFixture object at 0x7f63ea5a8520>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
>           gen.visit(ast)

tests/test_code.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:256: in visit_Program
    self.visit(_decl)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:304: in visit_FuncDef
    self.visit(node.body)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:519: in visit_Compound
    self.visit(statment)
uc/uc_sema.py:164: in visit
    return visitor(node)
uc/uc_code.py:212: in visit_Print
    self.visit(node.expr)
uc/uc_sema.py:163: in visit
    self.anotate_parent_visit(node)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_code.CodeGenerator object at 0x7f63ea159e70>, node = None

    def anotate_parent_visit(self, node):
>       for _, child in node.children():
E       AttributeError: 'NoneType' object has no attribute 'children'

uc/uc_sema.py:174: AttributeError
=========================== short test summary info ============================
FAILED tests/test_code.py::test_code[t20] - AttributeError: 'SymbolTableEntry...
FAILED tests/test_code.py::test_code[t21] - AttributeError: 'InitList' object...
FAILED tests/test_code.py::test_code[t22] - AttributeError: 'InitList' object...
FAILED tests/test_code.py::test_code[t23] - AttributeError: 'NoneType' object...
FAILED tests/test_code.py::test_code[t24] - AttributeError: 'NoneType' object...
FAILED tests/test_code.py::test_code[t25] - AttributeError: 'NoneType' object...
======================== 6 failed, 19 passed in 13.05s =========================
