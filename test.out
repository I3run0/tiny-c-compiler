============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.2, pluggy-1.5.0
rootdir: /workspaces/university-mc921/p4-codegen-217787_233539
configfile: pyproject.toml
collected 25 items

tests/test_code.py ...F...FF......FF........                             [100%]

=================================== FAILURES ===================================
________________________________ test_code[t04] ________________________________

test_name = 't04'
capsys = <_pytest.capture.CaptureFixture object at 0x7fc3b85198d0>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fc3b8394ca0>
expr_test = '%18', true_target = '%assert.true.1'
false_target = '%assert.false.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%assert.true.1'

uc/uc_interpreter.py:468: KeyError
________________________________ test_code[t08] ________________________________

test_name = 't08'
capsys = <_pytest.capture.CaptureFixture object at 0x7fc3b8093d30>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fc3b8092530>
expr_test = '%20', true_target = '%if.then.1', false_target = '%if.else.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
            self.pc = self.vars[true_target]
        else:
>           self.pc = self.vars[false_target]
E           KeyError: '%if.else.1'

uc/uc_interpreter.py:470: KeyError
----------------------------- Captured stdout call -----------------------------
enter the number = 
________________________________ test_code[t09] ________________________________

test_name = 't09'
capsys = <_pytest.capture.CaptureFixture object at 0x7fc3b81c8730>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fc3b84f6020>
expr_test = '%20', true_target = '%if.then.1', false_target = '%if.else.1'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%if.then.1'

uc/uc_interpreter.py:468: KeyError
----------------------------- Captured stdout call -----------------------------
enter the number = 
________________________________ test_code[t16] ________________________________

test_name = 't16'
capsys = <_pytest.capture.CaptureFixture object at 0x7fc3b7ed9450>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fc3b7ea00d0>
expr_test = '%16', true_target = '%while.body.2', false_target = '%while.end.2'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%while.body.2'

uc/uc_interpreter.py:468: KeyError
________________________________ test_code[t17] ________________________________

test_name = 't17'
capsys = <_pytest.capture.CaptureFixture object at 0x7fc3b7ed9390>

    @pytest.mark.parametrize(
        "test_name",
        [
            "t01",
            "t02",
            "t03",
            "t04",
            "t05",
            "t06",
            "t07",
            "t08",
            "t09",
            "t10",
            "t11",
            "t12",
            "t13",
            "t14",
            "t15",
            "t16",
            "t17",
            "t18",
            "t19",
            "t20",
            "t21",
            "t22",
            "t23",
            "t24",
            "t25",
        ],
    )
    # capfd will capture the stdout/stderr outputs generated during the test
    def test_code(test_name, capsys):
        input_path, expected_path = resolve_test_files(test_name)
    
        p = UCParser(debug=False)
        with open(input_path) as f_in, open(expected_path) as f_ex:
            ast = p.parse(f_in.read())
            sema = Visitor()
            sema.visit(ast)
            gen = CodeGenerator(False)
            gen.visit(ast)
            gencode = gen.code
            vm = Interpreter(False)
            with pytest.raises(SystemExit) as sys_error:
>               vm.run(gencode)

tests/test_code.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
uc/uc_interpreter.py:301: in run
    getattr(self, "run_" + opcode)(*op[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <uc.uc_interpreter.Interpreter object at 0x7fc3b8395810>
expr_test = '%16', true_target = '%while.body.2', false_target = '%while.end.2'

    def run_cbranch(self, expr_test, true_target, false_target):
        if M[self.vars[expr_test]]:
>           self.pc = self.vars[true_target]
E           KeyError: '%while.body.2'

uc/uc_interpreter.py:468: KeyError
=========================== short test summary info ============================
FAILED tests/test_code.py::test_code[t04] - KeyError: '%assert.true.1'
FAILED tests/test_code.py::test_code[t08] - KeyError: '%if.else.1'
FAILED tests/test_code.py::test_code[t09] - KeyError: '%if.then.1'
FAILED tests/test_code.py::test_code[t16] - KeyError: '%while.body.2'
FAILED tests/test_code.py::test_code[t17] - KeyError: '%while.body.2'
========================= 5 failed, 20 passed in 2.30s =========================
